name: Consolidated CI/CD

on:
  push:
    branches: [main, develop]
    paths:
      - 'lib/**'
      - 'bin/**'
      - 'docs/_posts/**'
      - 'Rakefile'
      - 'bin/new_changelog_post.rb'
      - 'bin/generate_tag_pages.rb'
      - 'docs/changelog.md'
      - 'docs/tag/**'
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  # Matrix testing across Ruby versions
  test-matrix:
    uses: ./.github/workflows/reusable/test.yml
    strategy:
      matrix:
        ruby-version: ['3.0', '3.1', '3.2', '3.3']
    with:
      ruby-version: ${{ matrix.ruby-version }}
      coverage: true
      upload-coverage: ${{ matrix.ruby-version == '3.2' }}
    secrets:
      CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # Linting with comprehensive checks
  lint:
    uses: ./.github/workflows/reusable/lint.yml
    with:
      ruby-version: '3.2.3'
      rubocop: true
      standardrb: true
      debride: true
      bundle-audit: true

  # Rails integration testing
  rails-integration:
    uses: ./.github/workflows/reusable/rails-integration.yml
    strategy:
      matrix:
        rails-version: ['7.0', '7.1', '7.2']
    with:
      ruby-version: '3.2.3'
      rails-version: ${{ matrix.rails-version }}

  # Documentation generation
  documentation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Install dependencies
        run: bundle install
        
      - name: Generate documentation
        run: bundle exec yard doc
        
      - name: Check documentation coverage
        run: bundle exec yard stats --list-undoc
        
      - name: Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: doc/

  # Performance testing
  performance:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Install dependencies
        run: bundle install
        
      - name: Run performance tests
        run: bundle exec rake performance
        
      - name: Run memory profiling
        run: bundle exec rake memory_profile

  # Gem build and validation
  gem-validation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Install dependencies
        run: bundle install
        
      - name: Build gem
        run: bundle exec rake build
        
      - name: Check gem metadata
        run: bundle exec rake check_metadata
        
      - name: Validate gem structure
        run: bundle exec rake validate_gem

  # Security audit
  security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Install dependencies
        run: bundle install
        
      - name: Run security audit
        run: bundle exec bundle audit check --update
        
      - name: Run syntax check
        run: bundle exec rake syntax

  # Code generation and drift check
  code-generation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          
      - name: Install dependencies
        run: |
          bundle install --jobs 4 --retry 3
          npm install
          
      - name: Generate validator docs
        run: bin/generate_validator_docs.rb
        
      - name: Generate OpenAPI spec
        run: bin/generate_openapi_spec.rb
        
      - name: Generate scenario tests
        run: bin/generate_scenario_tests.rb
        
      - name: Check for drift
        run: git diff --exit-code

  # Documentation automation
  docs-automation:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      GIT_AUTHOR_NAME: github-actions[bot]
      GIT_AUTHOR_EMAIL: github-actions[bot]@users.noreply.github.com
      GIT_COMMITTER_NAME: github-actions[bot]
      GIT_COMMITTER_EMAIL: github-actions[bot]@users.noreply.github.com
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Install dependencies
        run: bundle install
        
      - name: Run docs automation
        run: bundle exec rake docs:all
        
      - name: Check for broken links
        uses: lycheeverse/lychee-action@v1.10.0
        with:
          args: --verbose ./docs
          
      - name: Commit and push docs changes
        run: |
          git add docs/changelog.md docs/tag/
          git diff --cached --quiet || git commit -m "Auto-update changelog and tag pages [ci skip]"
          git push

  # i18n Translation sync
  i18n-sync:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Run translation sync script
        run: ruby bin/sync_translations.rb
        
      - name: Check for changes
        run: |
          git diff --exit-code || (echo 'Translations out of sync! Please run bin/sync_translations.rb and commit the changes.' && exit 1)

  # i18n Completeness check
  i18n-check:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check translation keys
        run: |
          ruby -e '
            require "yaml"
            t = YAML.load_file("docs/_data/translations.yml")
            keys = t.values.map(&:keys)
            all_keys = keys.flatten.uniq
            t.each do |lang, h|
              missing = all_keys - h.keys
              unless missing.empty?
                puts "Missing keys in #{lang}: #{missing.join(", ")}"
                exit 1
              end
            end
          '

  # Cypress E2E Tests
  cypress-e2e:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm install js-yaml cypress
          
      - name: Generate Cypress E2E tests from YAML
        run: node bin/generate_cypress_e2e_tests.js
        
      - name: Start local server
        run: |
          npm install -g http-server
          http-server docs -p 8080 &
          sleep 5
          
      - name: Run Cypress E2E tests
        run: npx cypress run --config baseUrl=http://localhost:8080 --spec cypress/e2e/generated_scenarios.cy.js

  # Lighthouse PWA Audit
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install Lighthouse
        run: npm install -g lighthouse
        
      - name: Start local server
        run: |
          npm install -g http-server
          http-server docs -p 8080 &
          sleep 5
          
      - name: Run Lighthouse Audit
        run: |
          lighthouse http://localhost:8080 --output html --output-path ./lighthouse-report.html --only-categories=pwa
          
      - name: Upload Lighthouse Report
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-report
          path: ./lighthouse-report.html

  # Jekyll site deployment
  jekyll-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [docs-automation, i18n-sync]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          working-directory: ./docs
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          cd docs
          bundle install
          bundle exec jekyll doctor
          
      - name: Build Jekyll site
        run: |
          cd docs
          bundle exec jekyll build --baseurl "/rich_text_extraction" --verbose
          
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/_site
          destination_dir: .

  # Gem publishing
  gem-publish:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: [test-matrix, lint, gem-validation]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.3'
          bundler-cache: true
          
      - name: Install dependencies
        run: bundle install
        
      - name: Build gem
        run: gem build rich_text_extraction.gemspec
        
      - name: Publish to RubyGems
        run: gem push rich_text_extraction-*.gem
        env:
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }} 